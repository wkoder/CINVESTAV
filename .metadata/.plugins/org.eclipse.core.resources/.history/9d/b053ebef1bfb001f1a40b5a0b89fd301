import java.io.*;
import java.util.*;

public class JavaSolution {
	
	private static int MAX = 200;
	private static int[] ENCODING = new int[]{5, 7, 6, 3, 0, 4, 9, 9, 6, 1, 7, 8, 5, 1, 8, 8, 1, 2, 3, 4, 7, 6, 2, 2, 3, 9};
	
	private Node root;
	private char[] buffer;
	private PrintWriter out;
	
	public JavaSolution() {
		root = new Node();
		buffer = new char[MAX];
		out = new PrintWriter(new BufferedOutputStream(System.out));
	}
	
	public void processInput(InputStream in) {
		Scanner scan = new Scanner(in);
		while (scan.hasNextLine()) {
			String line = scan.nextLine();
			if (Character.isLetter(line.charAt(0)))
				addWordToDictionary(line);
			else
				findEncodings(line);
			out.flush();
		}
	}
	
	/**
	 * Adds a word to the dictionary, which is compressed in a trie (http://en.wikipedia.org/wiki/Trie).
	 * @param word Word to add.
	 */
	public void addWordToDictionary(String word) {
		Node current = root; // Root of the trie (suffix tree)
		for (int i = 0; i < word.length(); i++) {
			char ch = word.charAt(i);
			if (!Character.isLetter(ch)) // We skip non-letters
				continue;
			
			int n = ENCODING[Character.toLowerCase(ch) - 'a'];
			if (current.next[n] == null) // Select next branch
				current.next[n] = new Node();
			
			current = current.next[n];
		}
		
		current.matchings.add(word.toCharArray()); // Adds current matching to the end of the trie branch.
	}
	
	/**
	 * Finds the different encodings of the given phone number.
	 * @param phone The phone number to encode.
	 */
	public void findEncodings(String phone) {
		findEncodingsAt(0, phone.toCharArray(), 0, root, true);
	}
	
	private void findEncodingsAt(int position, char[] phone, int bufferPosition, Node node, boolean canBeDigit) {
		if (position == phone.length) {
			if (node != root) // Non-terminal node
				return;
			
			out.print(phone);
			out.print(": ");
			for (int i = 0; i < bufferPosition; i++)
				out.print(buffer[i]);
			out.println();
			
			return;
		}
		
		if (!Character.isDigit(phone[position])) { // Skip non-digits
			findEncodingsAt(position+1, phone, bufferPosition, node, canBeDigit);
			return;
		}
		
		int n = phone[position] - '0';
		
		if (node.next[n] != null) { // A word still matches
			findEncodingsAt(position+1, phone, bufferPosition, node.next[n], false);

			for (char[] match : node.next[n].matchings) {
				int bufPos = bufferPosition;
				if (bufPos > 0)
					buffer[bufPos++] = ' ';
				for (int i = 0; i < match.length; i++, bufPos++)
					buffer[bufPos] = match[i];
				
				ok |= findEncodingsAt(position+1, phone, bufPos, root, true); // Deep in the branch
			}
			
		}

		if (canBeDigit && !ok) {
			int bufPos = bufferPosition;
			if (bufPos > 0)
				buffer[bufPos++] = ' ';
			buffer[bufPos++] = phone[position];
			ok |= findEncodingsAt(position+1, phone, bufPos, node, false);
		}
		
		return ok;
	}
	
	/**
	 * Trie node.
	 * @author Moises Osorio
	 */
	private class Node {
		private List<char[]> matchings;
		private Node[] next;
		
		public Node() {
			matchings = new ArrayList<char[]>();
			next = new Node[10];
		}
	}
	
	/**
	 * Entry point of the program.
	 * @param args
	 */
	public static void main(String[] args) {
		JavaSolution encoder = new JavaSolution();
		encoder.processInput(System.in);
	}
}
