/*
 * DifferentialEvolution.cpp
 *
 *  Created on: Aug 21, 2011
 *      Author: Moises Osorio
 */

#include "differentialevolution.h"
#include "randomlib.h"

DifferentialEvolution::DifferentialEvolution() {

}

DifferentialEvolution::~DifferentialEvolution() {

}

double DifferentialEvolution::solve(double *xs, int maxGenerations, int populationSize, double crossover, 
		double mutation, int n, double (*F)(double *x)) {
	double **x1 = new double*[populationSize];
	double **x2 = new double*[populationSize];
	double score[populationSize];
	
	for (int generation = 1; generation <= maxGenerations; generation++) {
		for (int i = 0; i < populationSize; i++) {
			// Pick 3 vectors
			int a = rndint(populationSize);
			int b = rndint(populationSize);
			while (b == a)
				b = rndint(populationSize);
			int c = rndint(populationSize);
			while (c == a || c == b)
				c = rndint(populationSize);
			
			int j = rndint(n); // Random first parameter
			for (int k = 1; k <= n; k++) {
				if (flip(crossover) || k == n) // From random vector plus weighted differential
					trial[j] = x1[c][j] + mutation * (x1[a][j] - x1[b][j]);
				else // From target
					trial[j] = x1[i][j];
				j = (j + 1) % n;
			}
			
			double score = F(trial);
			if (score <= cost[i]) { // Improves!
				for (int j = 0; j < n; j++)
					x2[i][j] = trial[j];
				cost[i] = score;
			} else // Keep it
				for (j = 0; j < n; j++)
					x2[i][j] = x1[i][j];
		}
		
		double **temp = x1; // Replace old population
		x1 = x2;
		x2 = temp;
	}
	
	int best = 0;
	for (int i = 1; i < populationSize; i++)
		if (score[i] < score[best])
			best = i;
	for (int j = 0; j < n; j++)
		xs[j] = x1[best][j];
	
	for (int i = 0; i < populationSize; i++) {
		delete [] x1[i];
		delete [] x2[i];
	}
	delete [] x1;
	delete [] x2;
	
	
	return score[best];
}
